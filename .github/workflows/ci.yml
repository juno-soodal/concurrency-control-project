name: CI

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      my-db:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: ÌòÑÏû¨ Î†àÌè¨ÏßÄÌÜ†Î¶¨Ïùò ÏΩîÎìúÎ•º Ï≤¥ÌÅ¨ÏïÑÏõÉÌï¥ÏÑú ActionsÏóê Í∞ÄÏ†∏Ïò®Îã§
        uses: actions/checkout@v4

      - name: JDK 17 ÏÑ§Ïπò
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: yml ÌååÏùº ÎßåÎì§Í∏∞
        run: |
          mkdir -p src/main/resources/
          mkdir -p src/test/resources/
          echo "$APPLICATION_YML" > src/main/resources/application.yml
          echo "$APPLICATION_PROD" > src/main/resources/application_PROD.yml
          echo "$APPLICATION_JWT" > src/main/resources/application-jwt.yml
          echo "$APPLICATION_TEST" > src/test/resources/application-test.yml
          ./gradlew test
        env:
          SPRING_PROFILES_ACTIVE: test
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
          APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}
          APPLICATION_JWT: ${{ secrets.APPLICATION_JWT }}
          APPLICATION_TEST: ${{ secrets.APPLICATION_TEST }}

      - name: Docker Compose Ïã§Ìñâ
        run: docker-compose up -d

      - name: Wait for MySQL & Redis to be healthy
        run: |
          echo "‚è≥ Waiting for containers to be healthy..."
          docker compose ps
          for service in mysql redis; do
            echo "üîç Waiting for $service"
            until [ "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q $service))" = "healthy" ]; do
              echo "‚ùó $service is not healthy yet. Retrying..."
              sleep 3
            done
            echo "‚úÖ $service is healthy!"
          done
      

      - name: gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
        run: chmod +x gradlew

      - name: ÌÖåÏä§Ìä∏ Ïã§Ìñâ
        run: |
          ./gradlew test

