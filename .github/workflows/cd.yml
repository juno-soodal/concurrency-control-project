name: CD

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed
    branches: [ "main" ]

env:
  ECR_REPOSITORY: team-9-server-ecr
  IMAGE_TAG: latest
  EC2_SERVER: team9-server

jobs:
  Deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: prod-yml 파일 만들기
        run: |
          echo "$APPLICATION_PROD" > src/main/resources/application_prod.yml
        env:
          APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: aws iam 사용자 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ecr에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: |
          docker build -t $ECR_REPOSITORY .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag $ECR_REPOSITORY ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH로 EC2에 접속
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop team9-server || true
            docker rm team9-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/team-9-server-ecr:latest
            docker run -d --name team9-server -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod ${{ steps.login-ecr.outputs.registry }}/team-9-server-ecr:latest



